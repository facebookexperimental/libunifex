/*
 * Copyright 2019-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma once

// the configured options and settings for unifex
#define UNIFEX_VERSION_MAJOR @libunifex_VERSION_MAJOR@
#define UNIFEX_VERSION_MINOR @libunifex_VERSION_MINOR@

#cmakedefine01 UNIFEX_NO_MEMORY_RESOURCE
#cmakedefine UNIFEX_MEMORY_RESOURCE_HEADER <@UNIFEX_MEMORY_RESOURCE_HEADER@>
#cmakedefine UNIFEX_MEMORY_RESOURCE_NAMESPACE @UNIFEX_MEMORY_RESOURCE_NAMESPACE@

#if defined(__has_cpp_attribute)
// prior to clang-10, [[no_unique_address]] leads to bad codegen
#if __has_cpp_attribute(no_unique_address) && \
  (!defined(__clang__) || __clang_major__ > 9)
#define UNIFEX_NO_UNIQUE_ADDRESS [[no_unique_address]]
#else
#define UNIFEX_NO_UNIQUE_ADDRESS
#endif
#else
#define UNIFEX_NO_UNIQUE_ADDRESS
#endif

#cmakedefine01 UNIFEX_NO_COROUTINES
#cmakedefine UNIFEX_COROUTINES_HEADER <@UNIFEX_COROUTINES_HEADER@>
#cmakedefine UNIFEX_COROUTINES_NAMESPACE @UNIFEX_COROUTINES_NAMESPACE@

#cmakedefine01 UNIFEX_NO_EPOLL
#cmakedefine01 UNIFEX_NO_LIBURING

// UNIFEX_DECLARE_NON_DEDUCED_TYPE(type)
// UNIFEX_USE_NON_DEDUCED_TYPE(type)
//
// These macros work around a bug in MSVC that causes it to try to specialize
// all found function templates for which it can successfully deduce template
// arguments even if there are parameters that do not participate in template
// parameter deduction for which there is no conversion possible from the argument.
//
// This is most likely related to the core issue CWG1391 [*] which MSVC has not
// yet implemented as of VS 2019.4.
//
// These macros are intended to be used in template functions, typically tag_invoke()
// overloads, as follows.
//
// Where you would normally write:
//
// class foo_sender {
//    template<
//      typename Receiver,
//      std::enable_if_t<is_callable_v<decltype(set_value), Receiver, foo>, int> = 0>
//    friend auto tag_invoke(tag_t<connect>, foo_sender&& s, Receiver&& r) -> foo_operation<Receiver> {
//      return ...;
//    }
// };
//
// You would instead write
//
// class foo_sender {
//   template<
//     typename Receiver,
//     UNIFEX_DECLARE_NON_DEDUCED_TYPE(CPO, tag_t<connect>),
//     UNIFEX_DECLARE_NON_DEDUCED_TYPE(S, foo_sender),
//     std::enable_if_t<is_callable_v<decltype(set_value), Receiver, foo>, int> = 0?
//   friend auto tag_invoke(
//        UNIFEX_USE_NON_DEDUCED_TYPE(CPO, tag_t<connect>),
//        UNIFEX_USE_NON_DEDUCED_TYPE(S, foo_sender)&& s,
//        Receiver&& r) -> foo_operation<Receiver> {
//      return ...;
//    }
// };

#if defined(_MSC_VER)
# define UNIFEX_DECLARE_NON_DEDUCED_TYPE(NAME, ...) \
  typename NAME, \
  std::enable_if_t<std::is_same_v<NAME, __VA_ARGS__>, int> = 0
 # define UNIFEX_USE_NON_DEDUCED_TYPE(NAME, ...) NAME
#else
# define UNIFEX_DECLARE_NON_DEDUCED_TYPE(NAME, ...) typename NAME = __VA_ARGS__
# define UNIFEX_USE_NON_DEDUCED_TYPE(NAME, ...) __VA_ARGS__
#endif
